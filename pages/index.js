import Head from 'next/head';
import { styled } from '@mui/material/styles';
import { useEffect, useRef, useState } from 'react';
import { Button, Typography } from '@mui/material';
import Box from '@mui/material/Box';
import ShareIcon from '@mui/icons-material/Share';
import Header from '../components/Header/Header';
import Wordle from '../components/Wordle';
import { useLocalStorage } from '../hooks/useLocalStorage';
import {
  gameStateInitial,
  statisticsStateInitial,
} from '../helpers/initialGameAndStatisticsState';
import { useInterval } from '../hooks/useInterval';
import ShowCounter from '../components/ShowCounter';
import BarChart from '../components/Header/BarChart';

const PageStyles = styled('div')(() => ({
  minHeight: '100vh',
  display: 'flex',
  flexDirection: 'column',
  backgroundColor: 'var(--color-background)',
}));

const InnerStyles = styled('main')(() => ({
  maxWidth: '1000px',
  margin: '1rem auto',
  flex: 1,
  display: 'flex',
  flexDirection: 'column',
}));

export default function Index() {
  const [gameState, setGameState] = useLocalStorage(
    'gameState',
    gameStateInitial
  );
  const [statisticsState, setStatisticsState] = useLocalStorage(
    'statisticsState',
    statisticsStateInitial
  );

  const [gameStatus, setGameStatus] = useState('');

  // countdown timer
  const currDate = new Date();
  const currTs = currDate.getTime();
  currDate.setHours(24, 0, 0, 0); // next midnight
  const nextMidnightTs = currDate.getTime();
  const msTillMidnight = nextMidnightTs - currTs;
  const [countDownMsRemaining, setCountDownMsRemaining] =
    useState(msTillMidnight);
  // pass T / F to Wordle component instead of countDownMsRemaining to prevent re-renders each second
  const [countDownFinished, setCountDownFinished] = useState(false);
  // TODO: should countDownVals be in state? Derived from countDownMsRemaining state
  const [countDownVals, setCountDownVals] = useState([null, null, null]);
  const [hours, minutes, seconds] = countDownVals;

  const [delay, setDelay] = useState(1000);
  // made it a ref because updating it in Wordle.js (before and after API call)
  // caused issue with index.js re-render
  const isRunning = useRef(true);

  const [infoMsg, setInfoMsg] = useState('');
  const [countInfoMsgs, setCountInfoMsgs] = useState(0);
  const [openStatistics, setOpenStatistics] = useState(false);

  useInterval(
    () => {
      // subtract 1s (1000ms)
      setCountDownMsRemaining((prevState) => prevState - 1000);
    },
    // paused when null
    isRunning.current ? delay : null
  );

  // countDown - time in ms
  function getCountDownValues(countDown) {
    // calculate time left
    const h = Math.floor(
      (countDown % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
    );
    const m = Math.floor((countDown % (1000 * 60 * 60)) / (1000 * 60));
    const s = Math.floor((countDown % (1000 * 60)) / 1000);

    return [h, m, s];
  }

  useEffect(() => {
    setCountDownVals(getCountDownValues(countDownMsRemaining));
    if (countDownMsRemaining <= 0) {
      setCountDownFinished(true);
    }
  }, [countDownMsRemaining]);

  return (
    <>
      <Head>
        <title>Wordle Clone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageStyles>
        {/* <Header2 /> */}
        <Header
          gameState={gameState}
          setInfoMsg={setInfoMsg}
          setCountInfoMsgs={setCountInfoMsgs}
          statisticsState={statisticsState}
          openStatistics={openStatistics}
          setOpenStatistics={setOpenStatistics}
        >
          {gameStatus === 'win' || gameStatus === 'lose' ? (
            <Box sx={{ py: 4, textAlign: 'center' }}>
              <Typography variant="subtitle" component="h3">
                Guess Distribution
              </Typography>
              <BarChart statisticsState={statisticsState} />
              <Box
                sx={{
                  display: 'flex',
                  flexWrap: 'wrap',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}
              >
                <ShowCounter
                  hours={hours}
                  minutes={minutes}
                  seconds={seconds}
                />
                <Button
                  variant="contained"
                  color="success"
                  endIcon={<ShareIcon />}
                  sx={{ height: '45px' }}
                >
                  Share
                </Button>
              </Box>
            </Box>
          ) : (
            ''
          )}
        </Header>
        <InnerStyles>
          <Wordle
            gameState={gameState}
            setGameState={setGameState}
            infoMsg={infoMsg}
            setInfoMsg={setInfoMsg}
            countInfoMsgs={countInfoMsgs}
            setCountInfoMsgs={setCountInfoMsgs}
            setStatisticsState={setStatisticsState}
            setOpenStatistics={setOpenStatistics}
            gameStatus={gameStatus}
            setGameStatus={setGameStatus}
            countDownFinished={countDownFinished}
            setCountDownFinished={setCountDownFinished}
            setCountDownMsRemaining={setCountDownMsRemaining}
            isRunning={isRunning}
          />
        </InnerStyles>
      </PageStyles>
    </>
  );
}
